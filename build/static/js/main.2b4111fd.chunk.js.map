{"version":3,"sources":["components/Compiler.tsx","components/Game.tsx","App.tsx","utils/apolloSetup.ts","reportWebVitals.ts","index.tsx"],"names":["Compiler","props","className","name","id","cols","rows","onClick","data","document","getElementById","value","setTimeout","Game","tempRow","i","tempCol","j","push","attackType","undefined","isOccupiedBy","useState","boardData","setBoardData","render","setRender","boardDataRef","useRef","Tile","style","margin","cursor","color","console","log","InfoTile","user1","position","occupiedTiles","power","user2","run","a","attack","moveTo","jump","to","user","userDoc","top","left","map","sleep","from","attackFrom","occupy","copyData","current","doc","toString","backgroundColor","arr","temp","forEach","ms","Promise","resolve","transition","toUpperCase","row","split","col","App","httpLink","HttpLink","uri","wsLink","WebSocketLink","options","reconnect","timeout","connectionParams","headers","splitLink","query","definition","getMainDefinition","kind","operation","ApolloClient","cache","InMemoryCache","link","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","ApolloProvider","client","apolloSetup"],"mappings":"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","file":"static/js/main.2b4111fd.chunk.js","sourcesContent":["import { gql, useSubscription } from '@apollo/client';\nimport * as React from 'react';\nimport { setTimeout } from 'timers';\n\ntype Props = {\n  \n};\n\nconst Compiler = (props: Props) => {\n\n  const run = () => {\n    const data: any = document.getElementById('compiler');\n    const code = data.value;\n    setTimeout(data.value, 1);\n  }\n\n  // const USER_SUBSCRIPTION = gql`\n  //   subscription MySubscription($id: String!) {\n  //     getuser(id: $id) {\n  //       id\n  //       name\n  //     }\n  //   }\n  // `;\n\n  // function LatestUser() {\n  //   const { data, loading } = useSubscription(\n  //     USER_SUBSCRIPTION,\n  //     { variables: { id: '1' } }\n  //   );\n  //   console.log(data,loading)\n  //   return <h4>New comment: {loading}</h4>;\n  // }\n\n  // const fetchGraphQL = async (operationsDoc: any, operationName: any, variables: any) => {\n  //   const result = await fetch(\n  //     'https://green-wave.ap-south-1.aws.cloud.dgraph.io/graphql',\n  //     {\n  //       method: 'POST',\n  //       headers: {\n  //         'Content-Type': 'application/json',\n  //         'X-Auth-Token': 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJzL3Byb3h5IiwiZHVpZCI6IjB4MjM0ZjAwYyIsImV4cCI6MTYyOTUzODE3NCwiaXNzIjoicy9hcGkifQ.YYmqbdYGBPJnPfDmAJKrR87m58WGPuCVdLKJq01GbuA'\n  //       },\n  //       body: JSON.stringify({\n  //         query: operationsDoc,\n  //         variables: variables,\n  //         operationName: operationName\n  //       })\n  //     }\n  //   );\n  //   return await result.json();\n  // }\n\n  // const operationsDoc = `\n  //   mutation MyMutation {\n  //     adduser(input: {name: \"jithendhra\", id: \"1\"}) {\n  //       numUids\n  //     }\n  //   }\n  // `;\n\n  // const start = async () => {\n  //   const { errors, data } = await fetchGraphQL(\n  //     operationsDoc,\n  //     'MyMutation',\n  //     {}\n  //   );;\n\n  //   if (errors) {\n  //     // handle those errors like a pro\n  //     console.error(errors);\n  //   }\n\n  //   // do something great with this precious data\n  //   console.log(data);\n  // }\n\n  // const operationsDocType = `const operationsDoc = \\`\n  //   mutation MyMutation {\n  //     adduser(input: {name: \"jithendhra\", id: \"1\"}) {\n  //       numUids\n  //     }\n  //   }\n  // \\`;`;\n\n  // const methods: any = 'const fetchGraphQL = ' + fetchGraphQL.toString() + '\\n'\n  //   + operationsDocType\n  //   + 'const start = '+ start.toString();\n\n  // setTimeout(methods, 1);\n\n  return (\n    <div className=\"h-screen w-1/2\">\n      <textarea name=\"compiler\" id=\"compiler\" cols={30} rows={10}></textarea>\n      <button onClick={run}>Click</button>\n    </div>\n  );\n};\n\nexport default Compiler;","// @flow \nimport { title } from 'process';\nimport * as React from 'react';\nimport { useRef } from 'react';\nimport { useState } from 'react';\nimport { useEffect } from 'react';\nimport '../index.css'\n\nconst color1 = '#E63E6D';\nconst color2 = '#0F52BA'\n\ntype Tile = {\n  id: string;\n  attackType: string | undefined;\n  isOccupiedBy: undefined | User;\n}\n\ntype User = {\n  id: string;\n  name: string;\n  position: number[];\n  occupiedTiles: number[][];\n  power: number;\n  color: string;\n}\n\nexport const Game = () => {\n\n  const tempRow: Tile[][] = [];\n  for (let i = 0; i < 19; i++){\n    const tempCol: Tile[] = [];\n    for (let j = 0; j < 19; j++)\n      tempCol.push({id: i+','+j, attackType: undefined, isOccupiedBy: undefined});\n    tempRow.push(tempCol);\n  }\n\n  const [boardData, setBoardData] = useState<Tile[][]>(tempRow);\n  const [render, setRender] = useState(true);\n  const boardDataRef = useRef<Tile[][]>(tempRow);\n\n  const Tile = (props: Tile) => {\n    const style: any = {\n      margin: '.5px',\n      cursor: 'pointer',\n    }\n    style['backgroundColor'] = props.isOccupiedBy?.color;\n    console.log(props.isOccupiedBy);\n    return (\n      <div className=\" w-8 h-8 tile\" style={style} id={props.id}>\n        <p className=\"m-0 text-xs hidden tileText\" style={{ color: props.isOccupiedBy ? 'white' : 'black' }}>{props.id}</p>\n      </div>\n    );\n  }\n\n  const InfoTile = (props:{id: number}) => {\n    return <div className=\"w-8 h-8 flex items-center text-white justify-center\" style={{margin: '.5px'}}>\n      <p className=\"m-0 text-sm\">{ props.id }</p>\n    </div>\n  }\n\n  const user1 = {\n    id: 'someId',\n    name: 'jithendhra',\n    position: [0, 0],\n    occupiedTiles: [],\n    power: 100,\n    color: color1\n  };\n\n  const user2 = {\n    id: 'someId',\n    name: 'lokesh',\n    position: [0, 0],\n    occupiedTiles: [],\n    power: 100,\n    color: color2\n  };\n\n  const run = async () => {\n    await attack([18, 1], user2);\n    await moveTo([18, 18], user1);\n    await attack([1, 1], user1);\n  }\n\n  const jump = async (to: number[], user: User) => {\n    const userDoc = document.getElementById('user1');\n    const top = 2.3;\n    const left = 2.3;\n    if (userDoc) {\n      userDoc.style.top = (top + 2.0625 * to[0]) + 'rem';\n      userDoc.style.left = (left + 2.0625 * to[1]) + 'rem';\n    }\n    if (user.name == 'lokesh') user2.position = to.map(a => a);\n    else user1.position = to.map(a => a);\n    await sleep(250);\n  }\n\n  const moveTo = async (to: number[], user: User) => {\n    const from = user.position.map(a => a);\n    while (!(from[0] == to[0]) || !(from[1] == to[1])) {\n      if (from[0] < to[0]) from[0]++;\n      else if (from[0] > to[0]) from[0]--;\n      if (from[1] < to[1]) from[1]++;\n      else if (from[1] > to[1]) from[1]--;\n      await jump(from, user);\n    }\n  }\n\n  const attackFrom = async (from: number[], to: number[], user: User) => {\n    await occupy(from, user);\n    while (!(from[0] == to[0]) || !(from[1] == to[1])) {\n      if (from[0] < to[0]) from[0]++;\n      else if (from[0] > to[0]) from[0]--;\n      if (from[1] < to[1]) from[1]++;\n      else if (from[1] > to[1]) from[1]--;\n      await occupy(from, user);\n    }\n    setBoardData(copyData(boardDataRef.current));\n    setTimeout(() => setRender(!render), 300);\n  }\n\n  const attack = async (to: number[], user: User) => {\n    const from = user.position;\n    attackFrom(from, to, user);\n  }\n\n  const occupy = async (position: number[], user: User) => {\n    boardDataRef.current[position[0]][position[1]].isOccupiedBy = user;\n    const doc = document.getElementById(position.toString());\n    if(doc) doc.style.backgroundColor = user.color;\n    await sleep(250);\n  }\n\n  const copyData = (arr: Tile[][]) => {\n    const temp: Tile[][] = [];\n    arr.forEach(arr => temp.push(arr.map(a => a)));\n    return arr;\n  }\n\n  const sleep = (ms: number) => new Promise(resolve => setTimeout(() => resolve(ms), ms));\n\n  return (\n    <div className=\"flex justify-center items-center bg-gray-900 w-3/4 h-screen\">\n      <div className=\"m-5 relative\">\n        <div id='user1' className=\"absolute m-0 w-6 h-6 text-sm text-white flex justify-center items-center rounded-full\"\n          style={{ backgroundColor: user1.color, top: '2.3rem', left: '2.3rem', transition: 'all .2s ease' }}>{user1.name.toUpperCase()[0]}</div>\n        <div className=\"flex ml-8\">\n          {boardData.map(row => <InfoTile id={+row[0].id.split(',')[0]} key={row[0].id.split(',')[0]} />)}\n        </div>\n        {\n          boardData.map(row =>\n          <div className=\"flex justify-center\" key={row[0].id.split(',')[0]}>\n            <InfoTile id={+row[0].id.split(',')[0]} key={row[0].id.split(',')[0]} />\n            {row.map(col => <Tile id={col.id} attackType = {col.attackType} isOccupiedBy = {col.isOccupiedBy} key={col.id} />)}\n          </div>\n        )}\n      </div>\n      <button onClick={run} className='text-white'>CLICK ME</button>\n    </div>\n  );\n};","import React from 'react';\nimport Compiler from './components/Compiler';\nimport { Game } from './components/Game';\n\nexport default function App(props: any) {\n  return (\n    <div className=\"flex\">\n      <Compiler />\n      <Game/>\n    </div>\n  );\n}\n","import { split, HttpLink, InMemoryCache, ApolloClient } from '@apollo/client';\nimport { getMainDefinition } from '@apollo/client/utilities';\nimport { WebSocketLink } from '@apollo/client/link/ws';\n\nconst token = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJzL3Byb3h5IiwiZHVpZCI6IjB4MjM0ZjAwYyIsImV4cCI6MTYyOTUzODE3NCwiaXNzIjoicy9hcGkifQ.YYmqbdYGBPJnPfDmAJKrR87m58WGPuCVdLKJq01GbuA';\n\nconst httpLink = new HttpLink({\n  uri: 'http://localhost:3000/graphql'\n});\n\nconst getHeaders = () => {\n  const headers = {\n    'Content-Type': 'application/json',\n    'X-Auth-Token': token\n  }\n  return headers;\n};\n\nconst wsLink = new WebSocketLink({\n  uri: 'wss://green-wave.ap-south-1.aws.cloud.dgraph.io/graphql',\n  options: {\n    reconnect: true,\n    timeout: 30000,\n    connectionParams: () => {\n      return { headers: getHeaders() };\n    }\n  }\n});\n\n// The split function takes three parameters:\n//\n// * A function that's called for each operation to execute\n// * The Link to use for an operation if the function returns a \"truthy\" value\n// * The Link to use for an operation if the function returns a \"falsy\" value\nconst splitLink = split(\n  ({ query }) => {\n    const definition = getMainDefinition(query);\n    return (\n      definition.kind === 'OperationDefinition' &&\n      definition.operation === 'subscription'\n    );\n  },\n  wsLink,\n  httpLink\n);\n\nexport default new ApolloClient({\n  cache: new InMemoryCache(),\n  link: splitLink \n});","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HelmetProvider } from 'react-helmet-async';\nimport './index.css';\nimport App from './App';\nimport apolloSetup from './utils/apolloSetup';\nimport reportWebVitals from './reportWebVitals';\nimport { ApolloProvider } from '@apollo/client';\n\nReactDOM.render(\n  <React.StrictMode>\n    <ApolloProvider client={apolloSetup}>\n      <HelmetProvider>\n        <App />\n      </HelmetProvider>\n    </ApolloProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}